-- find first and last order date 
SELECT MIN(order_date) AS first_order_date,MAX(order_date) AS last_order_date
FROM gold_fact_sales;

-- How many sales of year are availabe
SELECT Extract( year from AGE(MAX(order_date),MIN(order_date))) AS length_year
FROM gold_fact_sales;

--How many days are available
SELECT (MAX(order_date) - MIN(order_date)) AS length_year
FROM gold_fact_sales;

--find the youngest and oldest customer
SELECT 
MAX(AGE(NOW()::Date,birthdate)) AS age_of_Oldest_customer,
MIN(AGE(NOW()::Date,birthdate)) AS age_of_Oldest_customer
FROM
gold_dim_customers;
--find the youngest and oldest customer
WITH cte AS(
		SELECT (first_name||' '||last_name) AS name,AGE(NOW()::Date,birthdate) AS  age
		FROM gold_dim_customers
		
)
SELECT name,'youngest_customer' AS conditions,age
FROM cte
WHERE age=(SELECT MIN(age)
					FROM cte)
UNION 
SELECT name,'oldest_customer' AS conditions,age
FROM cte
WHERE age=(SELECT MAX(age)
					FROM cte);
-- Generate a reports that shows all key metrics of the business 

--find the total sales
SELECT 'Total_sales' AS measure_name,SUM(sales_amount) AS measure_value
FROM gold_fact_sales;

--find how many items are sold
SELECT 'Total_item_Sales' AS measure_name,SUM(quantity) AS measure_value
FROM gold_fact_sales;

--find the average selling price
SELECT 'average_selling_price' AS measure_name,ROUND(AVG(price),2) AS measure_value
FROM gold_fact_sales;

--find the total number of orders
SELECT ' Total orders' AS measure_name,COUNT(DISTINCT order_number) AS measure_value
FROM gold_fact_sales;

--find the total number of customers 
SELECT ' Total customers' AS measure_name,COUNT(DISTINCT customer_key) AS measure_value
FROM gold_dim_customers;

--find the total number of product
SELECT ' Total products' AS measure_name,COUNT(DISTINCT product_key) AS measure_value
FROM gold_dim_products;

-- find the total number of customers that has placed order
SELECT  'total_ordered_customers' AS measure_name,COUNT(DISTINCT customer_key)
FROM gold_fact_sales
WHERE order_number IS NOT NULL;

-- Generate a reports that shows all key metrics of the business 
WITH metrics AS(
SELECT 'Total_sales' AS measure_name,SUM(sales_amount) AS measure_value
FROM gold_fact_sales
UNION
SELECT 'Total_item_Sales' AS measure_name,SUM(quantity) AS measure_value
FROM gold_fact_sales
UNION
SELECT 'average_selling_price' AS measure_name,ROUND(AVG(price),2) AS measure_value
FROM gold_fact_sales
UNION
SELECT ' Total orders' AS measure_name,COUNT(DISTINCT order_number) AS measure_value
FROM gold_fact_sales
UNION
SELECT ' Total customers' AS measure_name,COUNT(DISTINCT customer_key) AS measure_value
FROM gold_dim_customers
UNION
SELECT ' Total products' AS measure_name,COUNT(DISTINCT product_key) AS measure_value
FROM gold_dim_products
UNION
SELECT  'total_ordered_customers' AS measure_name,COUNT(DISTINCT customer_key)
FROM gold_fact_sales
WHERE order_number IS NOT NULL)

SELECT *
FROM metrics;
--find the total customers by country
SELECT country,COUNT(customer_id) AS total_customers
FROM gold_dim_customers
GROUP BY country
ORDER BY total_customers DESC;
--find the total customers by gender 
SELECT gender,COUNT(customer_id) AS total_customers
FROM gold_dim_customers
GROUP BY gender
ORDER BY total_customers DESC;
--find total product by category
SELECT category ,COUNT(product_id) AS total_products
FROM gold_dim_products
GROUP BY category
ORDER BY total_products DESC;
--What is the average cost in each category 
SELECT category ,ROUND(AVG(cost),2) AS total_products
FROM gold_dim_products
GROUP BY category
ORDER BY total_products DESC;
--What is the total revenue generated for each category
SELECT p.category,
SUM(s.sales_amount)AS total_revenue
FROM gold_fact_sales AS s 
LEFT JOIN gold_dim_products AS p
ON p.product_key=s.product_key
GROUP BY p.category
ORDER BY total_revenue DESC;
--find total revenue is generated by each customer
SELECT s.customer_key,c.first_name||' '||c.last_name AS name,SUM(s.sales_amount)AS total_revenue
FROM  gold_fact_sales AS s
LEFT JOIN gold_dim_customers AS c
ON c.customer_key=s.customer_key
GROUP BY s.customer_key,c.first_name||' '||c.last_name
ORDER BY total_revenue DESC;
--What is the distributions of sold items across country
SELECT c.country,SUM(s.quantity)AS total_sold_items
FROM  gold_fact_sales AS s
LEFT JOIN gold_dim_customers AS c
ON c.customer_key=s.customer_key
GROUP BY c.country
ORDER BY total_sold_items DESC;
--Which 5 product generate high revenue
SELECT p.product_name,
SUM(s.sales_amount)AS total_revenue
FROM gold_fact_sales AS s 
LEFT JOIN gold_dim_products AS p
ON p.product_key=s.product_key
GROUP BY p.product_name 
ORDER BY total_revenue DESC
LIMIT 5;
--Alternative
SELECT *
FROM
(SELECT p.product_name,
SUM(s.sales_amount) AS total_revenue,
ROW_NUMBER()
OVER(ORDER BY SUM(s.sales_amount) DESC ) AS ranks
FROM gold_fact_sales AS s 
LEFT JOIN gold_dim_products AS p
ON p.product_key=s.product_key
GROUP BY p.product_name) AS ranked_product
WHERE ranks<=5
--What are the 5 wrost performing products in terms of sales ?
SELECT p.product_name,
SUM(s.sales_amount)AS total_revenue
FROM gold_fact_sales AS s 
LEFT JOIN gold_dim_products AS p
ON p.product_key=s.product_key
GROUP BY p.product_name 
ORDER BY total_revenue ASC
LIMIT 5;
-- find the top 10 customer who have genarated  the highest revenue
SELECT s.customer_key,c.first_name||' '||c.last_name AS name,SUM(s.sales_amount)AS total_revenue
FROM  gold_fact_sales AS s
LEFT JOIN gold_dim_customers AS c
ON c.customer_key=s.customer_key
GROUP BY s.customer_key,c.first_name||' '||c.last_name
ORDER BY total_revenue DESC
LIMIT 10;

-- The 3 customers with fewest order placed
SELECT s.customer_key,c.first_name||' '||c.last_name AS name,
COUNT(DISTINCT(order_number))AS total_order
FROM  gold_fact_sales AS s
LEFT JOIN gold_dim_customers AS c
ON c.customer_key=s.customer_key
GROUP BY s.customer_key,c.first_name||' '||c.last_name
ORDER BY total_order ASC
LIMIT 3;
--find the total sales over year
SELECT EXTRACT(year FROM order_date) AS year,
SUM(sales_amount) AS total_sales,
COUNT(DISTINCT customer_key)  AS total_customer,
SUM(quantity) AS total_quantity
FROM gold_fact_sales
WHERE order_date IS NOT NULL
GROUP BY EXTRACT(year FROM order_date)
ORDER BY year;

--find the total sales over time
SELECT 
EXTRACT(year FROM order_date) AS year,
EXTRACT(month FROM order_date) AS month,
SUM(sales_amount) AS total_sales,
COUNT(DISTINCT customer_key)  AS total_customer,
SUM(quantity) AS total_quantity
FROM gold_fact_sales
WHERE order_date IS NOT NULL
GROUP BY EXTRACT(year FROM order_date),EXTRACT(month FROM order_date)
ORDER BY year,month;

-- Alternative
SELECT 
DATE_TRUNC('month',order_date)::Date AS date,
SUM(sales_amount) AS total_sales,
COUNT(DISTINCT customer_key)  AS total_customer,
SUM(quantity) AS total_quantity
FROM gold_fact_sales
WHERE order_date IS NOT NULL
GROUP BY DATE_TRUNC('month' , order_date)::Date
ORDER BY date;
--Calculate the total sales per month
--running total of sales over time
SELECT month,
total,
SUM(total)
OVER(PARTITION BY month ORDER BY month) AS running_total
FROM
(SELECT DATE_TRUNC('month',order_date)::Date AS month,
SUM(sales_amount) AS total
FROM gold_fact_Sales
WHERE order_date IS NOT NULL
GROUP BY DATE_TRUNC('month',order_date)::Date
) AS monthly_sales;

/* Analyze the yearly performance of products by comparing their sales 
to both the average sales performance of the product and the previous year's sales*/
WITH yearly_product_sales AS (
SELECT 
EXTRACT(year FROM f.order_date) AS order_year,
p.product_name,
SUM(f.sales_amount) AS Current_sales
FROM gold_fact_sales AS f
LEFT JOIN gold_dim_products AS p
ON f.product_key=p.product_key
GROUP BY EXTRACT(year FROM f.order_date),p.product_name
ORDER BY order_year)

SELECT 
order_year,
product_name,
current_sales,
ROUND(AVG(current_sales) OVER(PARTITION BY product_name),2)  AS avg_sales,
ROUND(current_sales-AVG(current_sales) OVER(PARTITION BY product_name),2) AS avg_diff,
CASE WHEN (current_sales-AVG(current_sales) OVER(PARTITION BY product_name))>0 THEN 'Above average'
	 WHEN (current_sales-AVG(current_sales) OVER(PARTITION BY product_name))<0 THEN 'Below average'
	 ELSE 'Equal' END AS diff_avg,
LAG(current_sales,1) OVER(PARTITION BY product_name ORDER BY order_year) AS py_sales,
current_sales-LAG(current_sales,1) OVER(PARTITION BY product_name ORDER BY order_year)  AS diff_py,
CASE WHEN current_sales-LAG(current_sales,1) OVER(PARTITION BY product_name ORDER BY order_year)>0 THEN 'Increased'
	 WHEN current_sales-LAG(current_sales,1) OVER(PARTITION BY product_name ORDER BY order_year)<0 THEN 'Decreased'
	 ELSE 'No Change' END AS py_diff
FROM yearly_product_sales
ORDER BY product_name,order_year


--Which category contributes the most to overall  sales
WITH cte AS (
SELECT p.category,SUM(sales_amount) AS total_sales
FROM gold_fact_sales AS f
LEFT JOIN gold_dim_products AS p
ON f.product_key=p.product_key
GROUP BY p.category
)

SELECT category,
total_sales,
CONCAT(ROUND((total_sales/SUM(total_sales) OVER())*100,2),'%') AS sales_perc
FROM cte
ORDER BY total_sales DESC;

-- Segment product into cost ranges and count how many product fall into each segment
WITH product_segment AS (
SELECT 
product_key,
product_name,
CASE WHEN cost<100 THEN 'Below 100'
	 WHEN cost BETWEEN 100 AND 500 THEN '100-500'
	 WHEN cost BETWEEN 500 AND 1000 THEN '500-1000'
	 ELSE 'Above 100' END AS cost_range
FROM gold_dim_products)

SELECT cost_range ,
COUNT(product_key) AS total_products
FROM product_segment
GROUP BY cost_range
ORDER BY total_products DESC;

-- Group customers into three segment based on their spending behavior
--VIP:atleast 12 month of history but spending  more than 5000 dollars
--Regular:atleast 12 month of history but spending  5000 or less
--New:lifespan less than 12 month
-- find the total number of customer each groups

WITH customer_spending AS(
SELECT 
c.customer_key,
SUM(f.sales_amount) AS total_sales,
MIN(f.order_date) AS first_order_date,
MAX(f.order_date) AS last_order_date,
DATE_PART('year',AGE(MAX(f.order_date),MIN(f.order_date)))*12
+
DATE_PART('month',AGE(MAX(f.order_date),MIN(f.order_date)))AS life_span
FROM gold_fact_sales AS f
LEFT JOIN gold_dim_customers AS c
ON f.customer_key=c.customer_key
WHERE f.order_date IS NOT NULL
GROUP BY c.customer_key)

SELECT customer_segment,
COUNT(customer_key) AS total_customer
FROM(
SELECT customer_key,
total_sales,
CASE WHEN life_span>=12 AND total_sales>5000 THEN 'VIP'
     WHEN life_span>=12 AND total_sales<=5000 THEN 'Regular'
	 ELSE 'New' END AS customer_segment
FROM customer_spending) AS t
GROUP BY customer_segment
ORDER BY total_customer DESC;
--Alternative using second cte
/*cte2 AS(
SELECT customer_key,
total_sales,
CASE WHEN life_span>=12 AND total_sales>5000 THEN 'VIP'
     WHEN life_span>=12 AND total_sales<=5000 THEN 'Regular'
	 ELSE 'New' END AS customer_segment
FROM cte1)
SELECT 
cte2.customer_segment,
COUNT(cte2.customer_key) AS total_customer
FROM cte2 
LEFT JOIN cte1
ON cte1.customer_key=cte2.customer_key
GROUP BY cte2.customer_segment
ORDER BY total_customer DESC;*/


---
WITH base_query AS (
--Base query :Retrieve core columns from tables
SELECT 
f.product_key,
f.order_number,
f.quantity,
f.sales_amount,
f.order_date,
c.customer_key,
c.first_name||' '||c.last_name AS customer_full_name,
c.customer_number,
AGE(NOW()::Date,c.birthdate) AS Age
FROM gold_fact_sales AS f
LEFT JOIN gold_dim_customers AS c
ON f.customer_key=c.customer_key
WHERE f.order_date IS NOT NULL)
SELECT *
FROM base_query;


